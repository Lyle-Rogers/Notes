py manage.py createsuperuser: Creates a super user. After entering the command the terminal will prompt you to 
select a user name and password. You need to activate the virtual environment with the command bellow to do this
first. After user is created you can log into the django db on chrome with the user credentials given to access the db
to create users or other things.

pip install django: Installs django.

python -m pip install -U Django: Udates django to it's newest version.

py -m django --version: This will show the django version in the terminal.

django-admin startproject project-name: Creates a new django project.

py manage.py startapp project-name: Creates a new app in the django project. An app contains the backends models and migrations and view 
functions practically the whole backend. You can have multiple apps in the same project it's for having multiple websites with the same
database I think I'm not sure. 

pip install djangorestframework: Installs django's rest framework.

virtualenv env: Creates a virtual environment. Run this before the bottom command or it won't work.

.\env\Scripts\activate: Activates the virtual environment. Whatever tf that means. Wait I actually might know. But 
run this before running any django commands or it will through an error. This runs after the top command.

deactivate: deactivates the virtual environment and the env at the beggining will disappear.

pip freeze: Gives a list of all the dependencies in your activated environment. If the environment isn't activated it'll give a list of every 
dependency installed on the computer instead of the ones in the virtual environment.

pip freeze > requirements.txt: Makes a file called requirements.txt with a list of every dependency in your virtual environment. This file is where
aws and other things find the requirements needed for the application or you can run a command that install all of the dependencies in this list. and
I think this adds every dependencies installed on the computer the requirements.txt file and not just the ones in the backends virtual environment.

py manage.py runserver: Runs the back end server.

pip install -r requirements.txt: Installs the dependencies in the backends requirements.txt file.

pip install --upgrade pip: I think this updates pip for you.

py manage.py shell: Opens the python shell so that you can use python functions like creating and deleting that data that runs with the backend.

In LG when you delete and reinstall the BE it sometimes throughs an error because the user is in the FE isn't identified.
to fix this past and run this in the inspect terminal and it'll log you out and redirect you to the login page. Sign in
and it'll work again: localStorage.removeItem('userTokenLG')

py manage.py makemigrations: After making a new model or editing a model, runing this creates the migration for the new 
model data.

py manage.py migrate: After the migration files are made. This command migrates the new migrations to the database.

py manage.py showmigrations: Shows the migrations that are migrated in the terminal.